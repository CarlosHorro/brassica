.container.docs
  %h2.page-title Brassica Information Portal API

  .row
    .col-sm-2
      %nav.docs-sidebar
        %ul.nav
          %li= link_to "General introduction", "#general-introduction"
          %li= link_to "Fetching data", "#fetching-data"
          %li= link_to "Filtering data", "#filtering-data"
          %li= link_to "Searching for data", "#searching-for-data"
          %li= link_to "Submitting data", "#submitting-data"
          %li= link_to "Publishing data", "#publishing-data"
          %li= link_to "Deleting data", "#deleting-data"
          %li= link_to "API client example", "#client-example"
          %li
            %hr

          - Api.models.each do |model|
            %li= link_to model.name, "##{model.name.underscore.dasherize}"

    .col-sm-10
      %h3#general-introduction.section-heading General introduction

      %p
        BIP provides a HTTP RESTful API which uses JSON to represent resources. Resources represent
        database model elements (tables) which constitute BIP Schema. Full access to the API is allowed for all registered users.
        In order to authenticate your request, pass the <code>X-BIP-Api-Key</code> header in
        each call to the API.

      %p
        - if user_signed_in?
          Your personal API key is available in the
          = link_to 'profile page', api_keys_path
        - else
          .alert.alert-info You need to sign in to obtain your personal API key.

      %p
        The API exposes several resources for which fetching and submission of
        new entries is supported
        %sup
          %a(href="#cropstore-acknowledgement") [1].
        These include:

      %ul
        - Api.writable_models.each do |model|
          %li= model.name

      %p
        All attributes are expressed as basic data types such as <code>int</code>,
        <code>string</code>, <code>date</code> or arrays of these. Most of the related
        objects are not directly included in the response - instead they are represented by identifiers (or arrays
        of identifiers); for instance <code>taxonomy_term_id</code> or <code>qtl_ids</code>.
        Use these identifiers to retrieve the relevant resources with further API calls.

      %p
        Those related objects which are not available through a dedicated API read call are
        always embedded in the parent data structure - for example, <code>population_type</code>.
        They are usually represented by the <code>object</code> format in the attribute tables.

      %h4 Example
      %pre.response
        %code= t('api.general.create.examples.ok_response')

      %p Several resources support fetching data only:

      %ul
        - Api.readonly_models.each do |model|
          %li= model.name


      %h3#fetching-data.section-heading Fetching data

      %p
        Any resource can be fetched by passing its <code>id</code>.
        Multiple resources can be fetched with or without additional parameters
        to filter results. These parameters are specific for each
        resource and will be described in detail later on.

      %p
        If a resource is owned by another BIP user, and is set as <i>not published</i>,
        you will not be able to fetch it.

      %p Fetching multiple resources always yields paginated results.

      = api_props('Pagination parameters', 'pagination.params',
          default_per_page: Kaminari.config.default_per_page,
          max_per_page: Kaminari.config.max_per_page)

      = api_props('Paginated response metadata', 'pagination.meta')

      %h4 Example
      %pre
        %code= t('api.pagination.request')

      %pre.response
        %code= t('api.pagination.response')

      %p
        <strong>Remember</strong> to replace <code>X-BIP-Api-Key</code> with your own API key.


      %h3#filtering-data.section-heading Filtering data

      %p
        Most resources can be filtered by selected attributes.
        The attribute tables (listed below for each resource type) indicate when a specific
        attribute may be subject to filtering - look for the <strong>`Q`</strong> marker.
        The usage pattern is as follows:

      = api_props('Query filtering', 'filtering.params')

      %h4 Examples
      %ol
        %li
          %p Plant Line filtering by <code>plant_line_name</code>
          %pre
            %code= t('api.filtering.request')

          = render partial: 'application/api/try_it', locals: { url: "/api/v1/plant_lines?plant_line[query][plant_line_name]=WINFRED" }

        %li
          %p
            Multiple filtering attributes can be applied in a single query - here we filter
            Plant Varieties by <code>owner</code> and <code>registration_year</code>
          %pre
            %code= t('api.filtering.multi_request')

          = render partial: 'application/api/try_it', locals: { url: "/api/v1/plant_varieties?plant_variety[query][owner]=Limagrain&plant_variety[query][reqistration_year]=1998" }

      %p
        One additional special filter, called <code>only_mine</code> may be used to fetch
        only the resources which you own (that is, which were created by you). This is how
        you use this special filter:

      %pre
        %code= t('api.filtering.only_mine_request')

      = render partial: 'application/api/try_it', locals: { url: "/api/v1/plant_varieties?only_mine=true" }

      %h3#searching-for-data.section-heading Searching for data

      %p
        It is also possible to search for a given resource by passing a term and matching it against
        multiple attributes at once. This resembles the search capability available on the BIP front page.
        Such queries need to be scoped by resource type.

      %p
        <i>What exactly is being sought?</i> The resource attributes that are checked for the presence of the search term
        are basically all those marked with the <strong>`Q`</strong> tag in the attribute tables.
        Additionally, some related resource attributes are checked - the rule of thumb is that if an attribute
        value is visible as a column in the

        = link_to 'browse data', browse_data_path

        tables, it should be searchable via the <code>fetch</code> API parameter.

      = api_props('Searching', 'searching.params')

      %h4 Examples
      %ol
        %li
          %p Plant Lines search
          %pre
            %code= t('api.searching.request')

          = render partial: 'application/api/try_it', locals: { url: "/api/v1/plant_lines?plant_line[fetch]=WINFRED" }

        %li
          %p
            The result includes metadata showing how many records were found - see the
            <code>total_count</code> value in the <code>meta</code> result document element.
            It is therefore possible to combine filtering and pagination in a single request,
            e.g. to retrieve further data.
          %pre
            %code= t('api.searching.pagination_request')

          = render partial: 'application/api/try_it', locals: { url: "/api/v1/plant_lines?plant_line[fetch]=WINFRED&per_page=2&page=2" }

        %li
          %p
            Searching by related object attribute - the <code>name</code> of a Taxonomy Term
          %pre
            %code= t('api.searching.subobject_request')

          = render partial: 'application/api/try_it', locals: { url: "/api/v1/plant_populations?plant_population[fetch]=oleracea&per_page=5" }

      %p
        In order to maintain consistency between successive searches, all search results are ordered
        by their internal <code>id</code> BIP identifier. This ensures the API will return the same results
        in the same order in two subsequent calls - provided, of course, no new data is submitted
        in the meantime. For this reason the results of `fetch` API calls might differ slightly from
        what can be obtained via the web search form.


      %h3#submitting-data.section-heading Submitting new data

      %p
        The following resources can currently be submitted via API calls:

      %ul
        - Api.writable_models.each do |model|
          %li= model.name

      %p
        Data submission is based on the JSON format, i.e., the API <code>POST</code>
        request should pass a JSON document whose root element matches the name of the
        target resource type (e.g. <code>plant_population</code>).
        Each resource section below shows an example of such a <code>POST</code> API call.

      %p
        For each resource some attributes (described later) are required in create requests.
        Skipping any of those will result in a
        <code>422</code> error response. Passing attributes which are not recognized by the API will also
        produce <code>422</code> errors.

      %h4 Examples
      %ol
        %li
          %p Missing value for required attribute
          %pre.response
            %code= t('api.general.create.examples.missing_required_attrs_response')

        %li
          %p Misspelled attribute name
          %pre.response
            %code= t('api.general.create.examples.unknown_attrs_response')

      %p
        Most of the resource attributes, as shown in the following attribute tables,
        are textual (<code>string</code> format) - these are simply pieces of text of
        arbitrary length, enclosed in double quotation marks <code>"</code>. Attributes
        that are of <code>int</code> format are passed without quotes.

      %p
        Dates should be entered in a textual format - several different notations are
        recognized and accepted, although we suggest sticking to a single, consistent
        format - <code>YYYY-MM-DD</code>. Examples are provided below:

      %h4 Example
      %pre.response
        %code= t('api.general.create.examples.attribute_value_samples')

      %p
        Two attributes are never entered by users, but are instead automatically set by the server:

      = api_props('Default attribute values', 'general.create.default_attribute_values')

      %p
        Finally, attributes marked as <code>readonly</code> in the attribute
        tables cannot be directly set. These include single related resources
        (one such example is the <code>population_type</code> of a Plant Population).
        In this case, one should provide the BIP identifier of a related object when submitting
        new data. For instance, when submitting a new Plant Population:

      %h4 Example
      %pre.response
        %code= t('api.general.create.examples.wrong_vs_right_related_object')

      %p
        If the provided identifier does not exist in the BIP database, the following error will be returned:

      %pre.response
        %code= t('api.general.create.examples.invalid_foreign_key')

      %p
        Another case of a <code>readonly</code> attribute involves multiple related
        resources - for instance, <code>plant_trials_ids</code> of a Plant Population.
        In such cases the correct relationship is set while submitting the corresponding
        resource (i.e., in a reverse fashion). For example, when submitting a new Plant Trial,
        supplying a correct value of <code>plant_population_id</code> will create the intended relationship.

      %p
        If the submission is successful, you will get a JSON document in return. Since the document
        describes the submitted record, it will mostly contain the data you have just submitted.
        However, it also provides the <i>internal BIP identifier</i> assigned to the new
        record - see the value of the <code>id</code> attribute.

      %pre.response
        %code= t('api.general.create.examples.created_record_sample')

      %p
        You may now utilize that identifier to <i>relate</i> your newly created object with
        other records you are about to submit (for instance, new Plant Populations).

      %h3#publishing-data.section-heading Publishing submitted data

      %p
        The basic data management policy of BIP is that after you submit your data it
        becomes public and can be cited as a public resource by other users. However,
        you can explicitly state that you wish your data to remain private.

      %h4 Example
      %pre.request
        %code= t('api.publishing.create_private_request')

      %p
        Data submitted as private can be published at a later date. Resources which are
        to be published need to be updated one by one.

      %h4 Example
      %pre.request
        %code= t('api.publishing.publish_request')

      %p
        The rule of thumb is that after publishing data you have exactly
        <strong>one week</strong> to revoke publication. Please use this
        time to check whether all information was correctly provided. After one week,
        the publication becomes permanent and cannot be revoked.

      %h4 Example
      %pre
        %code= t('api.publishing.revoke_request')

      %p
        This operation will not delete your data, but BIP will no longer show
        it to other users. You can publish it again whenever you wish.

      %h3#deleting-data.section-heading Deleting submitted data

      %p
        Mistakes do happen and therefore we provide the ability to
        delete submitted resources. You can only delete private resources or published resources
        for which the revocation timer has not yet expired. Should you wish to delete any other data,
        please contact the BIP support team directly.

      %h4 Example
      %pre
        %code= t('api.delete.request')

      %p
        This example shows how to <i>delete</i> the Plant Population with the internal
        BIP <code>id</code> equal 5555. This may result in several different responses:

      %h4 Examples
      %ol
        %li
          %p Wrong, nonexistent Plant Population
          %pre.response
            %code= t('api.delete.examples.no_record_found')

        %li
          %p API key owner and resource owner are not the same user
          %pre.response
            %code= t('api.delete.examples.wrong_owner')

        %li
          %p The requested resource is already past its revocation period and cannot be deleted anymore
          %pre.response
            %code= t('api.delete.examples.already_published')

        %li
          %p The call was a success, the resource was deleted
          %pre.response
            %code= t('api.delete.examples.ok_response')

      %h3#client-example.section-heading API client example

      %p
        In order to demonstrate the capabilities of the API and to assist new programmers in preparing
        their own BIP client code, we provide a fairly complex example of a client program, written in
        Ruby (Ruby MRI interpreter version 2.2 is required to run it).

      %p
        The sample client consists of two elements:
        %ul
          %li= link_to 'sample trait scoring data, to be submitted', 'client_example/tocopherols.csv'
          %li= link_to 'the actual script which submits this data.', 'client_example/bip_client_example.rb'

      %p
        You will also need your API key. Please refer to the
        = link_to 'general introduction', '#general-introduction'
        for instructions on how to obtain it. Additional information regarding the example is contained in
        the script file - the code is rather self-explanatory, and we provide embedded comments.

      %p
        It should be noted that this script is not meant to be a generic, all-purpose client for the BIP API.
        Rather, its purpose is to provide an example of how to prepare your own scripts, matching
        specific user requirements. The sample data was generated on the basis of RIPR project data, with
        altered (fictional) values.

      %h3#tables-introduction.section-heading Detailed model introduction

      %p
        Below, the resources (which mostly represent data base tables in the BIP data model) and their attributes
        (which correspond, to large extent, with individual columns in data base tables) that are exposed with the API
        are described in more detail. Use these attributes in your calls to the API. For each resource, a set of
        examples for various API calls is given below its attributes table.


      -# Models section follows

      - Api.models.each do |model|
        .section
          %h3.section-heading{id: model.name.underscore.dasherize}= model.name

          .description The following table shows a list of attributes describing this resource:

          = api_props('Attributes', "#{model.name.underscore}.attrs")

          = raw t("api.#{model.name.underscore}.note", default: '')

          -# GET index
          = render partial: 'application/api/index', locals: { model: model }
          %hr

          -# GET show
          = render partial: 'application/api/show', locals: { model: model }
          %hr

          -# POST create
          - if Api.writable_model?(model)
            = render partial: 'application/api/create', locals: { model: model }
            %hr

      %h3#cropstore-acknowledgement.section-heading CropStoreDB acknowledgement

      %p
        As the BIP database Schema is based on the CropStoreDB schema, the definitions in the API documentation
        are heavily derived from those in CropStoreDB. We would like to acknowledge the CropStoreDB team managed
        by Graham King for the prior work this webpage draws from. Their database can be found on
        =link_to 'CropStoreDB', 'http://www.cropstoredb.org/', target: '_blank'
        and their resource is cited as Love et al. (2012).

      %p.small
        Love, C. G., Andongabo, A. E., Wang, J., Carion, P. W. C., Rawlings, C. J. and King, G. J. (2012),
        InterStoreDB: A Generic Integration Resource for Genetic and Genomic Data.
        Journal of Integrative Plant Biology, 54: 345–355. doi:
        = link_to '10.1111/j.1744-7909.2012.01120.x', 'https://doi.org/10.1111/j.1744-7909.2012.01120.x', target: '_blank'
