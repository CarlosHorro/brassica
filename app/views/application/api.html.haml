.container.docs
  %h2.page-title Brassica Information Portal API

  .row
    .col-sm-2
      %nav.docs-sidebar{"data-offset-top" => "220", "data-spy" => "affix"}
        %ul.nav
          %li= link_to "General introduction", "#general-introduction"
          %li= link_to "Fetching data", "#fetching-data"
          %li= link_to "Searching for data", "#searching-for-data"

          - Brassica::Api.models.each do |model|
            %li= link_to model.name, "##{model.name.underscore.dasherize}"

    .col-sm-10{"data-spy" => 'scroll', "data-target" => '.docs-sidebar', style: 'position:relative'}
      %h3#general-introduction.section-heading General introduction

      %p
        BIP provides HTTP REST-style API which uses JSON to represent returned
        resources. Full access to the API is allowed for all registered users.
        In order to authenticate users pass <code>X-BIP-Api-Key</code> header in
        each call to the API.

      %p
        The API exposes several resources for which fetching and submission of
        new entries is supported. These include:

      %ul
        %li PlantPopulation
        %li PlantLine
        %li ...

      %p Several other resources allow for fetching data only:

      %ul
        %li TaxonomyTerm
        %li PlantVariety
        %li ...


      %h4 Examples
      %ol
        %li
          %p
            Sending invalid JSON will result in a
            %code 400 Bad Request
            response.
          %pre
            %code
              :preserve
                 HTTP/1.1 400 Bad Request
                 Content-Length: 35

                 {"message":"Problems parsing JSON"}
        %li
          %p
            Sending the wrong type of JSON values will result in a
            %code
              400 Bad
              Request
            response.
          %pre
            %code
              :preserve
                 HTTP/1.1 400 Bad Request
                 Content-Length: 40

                 {"message":"Body should be a JSON object"}
        %li
          %p
            Sending invalid fields will result in a
            %code 422 Unprocessable Entity
            response.
          %pre
            %code
              :preserve
                 HTTP/1.1 422 Unprocessable Entity
                 Content-Length: 149

                 {
                   "message": "Validation Failed",
                   "errors": [
                     {
                       "resource": "Issue",
                       "field": "title",
                       "code": "missing_field"
                     }
                   ]
                 }




      %h3#fetching-data.section-heading Fetching data

      %p
        Each single resource can be fetched by giving its <code>id</code>.
        Multiple resources can be fetched with or without additional parameters
        limiting returned results. These parameters are specific for each
        resource and will be described in detail later.

      %p Fetching multiple resources always yields paginated results.

      = render partial: 'api_props',
               locals: { title: 'Pagination parameters',
                         props:  api_props('pagination.params',
                                           default_per_page: Kaminari.config.default_per_page,
                                           max_per_page: Kaminari.config.max_per_page) }
      = render partial: 'api_props',
               locals: { title: 'Paginated response metadata',
                         props:  api_props('pagination.meta') }

      .panel.panel-default
        .panel-heading
          .panel-title Paginated response format

        .panel-body
          %pre
            %code= t('api.pagination.response')

      %h3#searching-for-data.section-heading Searching for data

      %p
        Similar generic section about how to issue full-text search calls to
        BIP, how to adjust scope (model), what to expect as the outcome

      - Brassica::Api.models.each do |model|
        .section
          %h3.section-heading{id: model.name.underscore.dasherize}= model.name

          .description Some pretty exhaustive description of the entity represented by this resource

          = render partial: 'api_props',
                   locals: { title: "Attributes",
                             props: api_props("#{model.name.underscore}.attrs") }

          -# GET index
          = render partial: 'application/api/index', locals: { model: model }
          %hr

          -# GET show
          = render partial: 'application/api/show', locals: { model: model }
          %hr

          - if Brassica::Api.writable_model?(model)
            = render partial: 'application/api/create', locals: { model: model }
            %hr

