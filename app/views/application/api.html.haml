.container.docs
  %h2.page-title Brassica Information Portal API

  .row
    .col-sm-2
      %nav.docs-sidebar{"data-offset-top" => "220", "data-spy" => "affix"}
        %ul.nav
          %li= link_to "General introduction", "#general-introduction"
          %li= link_to "Fetching data", "#fetching-data"
          %li= link_to "Searching for data", "#searching-for-data"

          - Api.models.each do |model|
            %li= link_to model.name, "##{model.name.underscore.dasherize}"

    .col-sm-10
      %h3#general-introduction.section-heading General introduction

      %p
        BIP provides HTTP REST-style API which uses JSON to represent returned
        resources. Full access to the API is allowed for all registered users.
        In order to authenticate users pass <code>X-BIP-Api-Key</code> header in
        each call to the API.

      %p
        - if user_signed_in?
          Your personal API key is available in the
          = link_to 'profile page', api_keys_path
        - else
          .alert.alert-info You need to sign in to obtain your personal API key.

      %p
        The API exposes several resources for which fetching and submission of
        new entries is supported. These include:

      %ul
        - Api.writable_models.each do |model|
          %li= model.name

      -# FIXME verify and describe date format
      %p
        All attributes are expressed as basic data types such as <code>int</code>,
        <code>string</code>, <code>date</code> or arrays of these. Specifically related objects
        are not included in the response as a whole but as an array of their
        unique identifiers.

      %h4 Example
      %pre.response
        %code= t('api.general.create.examples.ok_response')

      %p
        For each resource there are attributes (described later) required
        for create requests. Skipping any of those will result in an
        <code>422</code> error response. Passing attributes which are not recognized by the API will also
        result in <code>422</code> error response.

      %h4 Examples
      %ol
        %li
          %p Missing value for required attribute
          %pre.response
            %code= t('api.general.create.examples.missing_required_attrs_response')

        %li
          %p Misspelled attribute name
          %pre.response
            %code= t('api.general.create.examples.unknown_attrs_response')

      %p Several other resources allow for fetching data only:

      %ul
        - Api.readonly_models.each do |model|
          %li= model.name

      %h3#fetching-data.section-heading Fetching data

      %p
        Each single resource can be fetched by giving its <code>id</code>.
        Multiple resources can be fetched with or without additional parameters
        limiting returned results. These parameters are specific for each
        resource and will be described in detail later.

      %p Fetching multiple resources always yields paginated results.

      = api_props('Pagination parameters', 'pagination.params',
          default_per_page: Kaminari.config.default_per_page,
          max_per_page: Kaminari.config.max_per_page)

      = api_props('Paginated response metadata', 'pagination.meta')

      %h4 Example
      %pre
        %code= t('api.pagination.request')

      %pre.response
        %code= t('api.pagination.response')

      %h3#searching-for-data.section-heading Searching for data

      -# TODO FIXME this section to be developed further
      %p
        Similar generic section about how to issue full-text search calls to
        BIP, how to adjust scope (model), what to expect as the outcome


      -# Models section follows

      - Api.models.each do |model|
        .section
          %h3.section-heading{id: model.name.underscore.dasherize}= model.name

          .description The following table explains the list of attributes describing this resource

          = api_props('Attributes', "#{model.name.underscore}.attrs")

          -# GET index
          = render partial: 'application/api/index', locals: { model: model }
          %hr

          -# GET show
          = render partial: 'application/api/show', locals: { model: model }
          %hr

          -# POST create
          - if Api.writable_model?(model)
            = render partial: 'application/api/create', locals: { model: model }
            %hr
